/*
 * generated by Xtext 2.20.0
 */
package org.xtext.example.math_interpreter.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.swing.JOptionPane
import org.xtext.example.math_interpreter.math.MathExp
import org.xtext.example.math_interpreter.math.Exp
import org.xtext.example.math_interpreter.math.Primary
import org.xtext.example.math_interpreter.math.Parenthesis
import org.xtext.example.math_interpreter.math.Addition
import org.xtext.example.math_interpreter.math.Subtraction
import org.xtext.example.math_interpreter.math.Multiplication
import org.xtext.example.math_interpreter.math.Division
import org.xtext.example.math_interpreter.math.Num

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {

override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		System.out.println("Math expression = "+math.display)
		// For +1 score, replace with hovering, see Bettini Chapter 8
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def int compute(MathExp math) {
		math.exp.computeExp 
	}
	
	def dispatch int computeExp(Exp exp) {
		val left = exp.left.computePrim
		switch exp.operator {
			Addition: left+exp.right.computeExp
			Subtraction: left-exp.right.computeExp
			Multiplication: left*exp.right.computeExp
			Division: left/exp.right.computeExp
			default: left
		}
	}
	
	def int computePrim(Exp factor) {
		factor.computeExp
	}
	
	
	def dispatch int computeExp(Parenthesis p){
		val exp_in_parenthesis = p.getExp()
		computeExp(exp_in_parenthesis)
	}
	
	def dispatch int computeExp(Num n){ n.getValue() }


	//
	// Display function: show complete syntax tree
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def CharSequence display(MathExp math) '''START<  «math.exp.displayExp»  >END'''
	
	def dispatch CharSequence displayExp(Exp exp) '''Exp<«exp.left.displayExp»> Op<«exp.operator.displayOperator»> Exp<«exp.right.displayExp»>'''
	def dispatch CharSequence displayExp(Parenthesis p) {'''par<«displayExp(p.getExp())»>'''}
	def dispatch CharSequence displayExp(Num p) {'''«p.getValue()»'''}
	
	def dispatch String displayOperator(Multiplication op) { "*" }
	def dispatch String displayOperator(Division op) { "/" }
	def dispatch String displayOperator(Addition op)  { "+" }
	def dispatch String displayOperator(Subtraction op) { "-" }
	
	def CharSequence displayFactor(Primary primary) { "?" }

}
